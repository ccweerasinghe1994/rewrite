import groovy.json.JsonOutput
def gv

pipeline {
    agent any

     environment {
            // Manually define BRANCH_NAME if not set by Jenkins environment
            BRANCH_NAME = "${env.BRANCH_NAME ?: 'main'}"
            SERVER_CREDENTIALS = credentials('server-credentials')
            HAS_VANUARABLE_DEPENDENCIES = false
     }
     parameters {
        string(name: 'VERSION', defaultValue: '1.0.0', description: 'Version to build')
        credentials(name: 'SERVER_CREDENTIALS', description: 'Credentials for server')
        choice(name: 'CHOICE', choices: ['one', 'two', 'three'], description: 'Choose one')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'whether to run tests')
     }

     tools {
        maven 'maven-3.9.8'
     }

    stages {
        stage('Init'){
            steps {
                echo "Init.."
                script {
                    gv = load('cicd/script.groovy')
                }
            }
        }

        stage('Build') {

            when {
                expression { BRANCH_NAME == 'main' }
            }
            steps {
                script {
                    gv.buildApp()
                }
            }
        }
//         stage('dependency-check') {
//             steps {
//                 script {
//                     echo 'Checking for dependency updates'
//                     sh 'mvn versions:display-dependency-updates'
//                     echo 'Checking for plugin updates'
//                     sh 'mvn versions:display-plugin-updates'
//                 }
//             }
//         }
//


        stage('generate vulnerabilities report') {

            steps {
                script {
                    echo 'Checking for vulnerabilities'
                    sh 'mvn rewrite:run'
                }
            }

        }

        stage('Print Vulnerability Report Existence') {
            steps {
                script {
                    def reportExists = sh(script: "find ./target -type f -name 'org.openrewrite.java.dependencies.table.VulnerabilityReport.csv'", returnStdout: true).trim()
                    if (reportExists) {
                        echo 'Vulnerability report found'
                        HAS_VANUARABLE_DEPENDENCIES = true
                        // Display the contents of the vulnerability report
                        sh "cat \$(find ./target -type f -name 'org.openrewrite.java.dependencies.table.VulnerabilityReport.csv')"
                    } else {
                        echo 'No vulnerability report found'
                    }
                }
            }
        }
//         stage('Print Vulnerability Report in JSON') {
//             steps {
//                 script {
//                     def reportPath = sh(script: "find ./target -type f -name 'org.openrewrite.java.dependencies.table.VulnerabilityReport.csv'", returnStdout: true).trim()
//                     if (reportPath) {
//                         echo 'Vulnerability report found'
//                         HAS_VANUARABLE_DEPENDENCIES = true
//
//                         // Read CSV file
//                         def csvContent = readFile(reportPath)
//                         def lines = csvContent.split('\n')
//                         def headers = lines[0].split(',')
//                         def jsonList = []
//
//                         // Convert CSV to JSON
//                         lines.tail().each { line ->
//                             def data = line.split(',')
//                             def jsonObject = [:]
//                             headers.eachWithIndex { header, idx ->
//                                 jsonObject[header.trim()] = data[idx].trim()
//                             }
//                             jsonList << jsonObject
//                         }
//
//                         // Output JSON
//                         echo JsonOutput.toJson(jsonList)
//
//                     } else {
//                         echo 'No vulnerability report found'
//                     }
//                 }
//             }
//         }

                stage('convert Vulnerability Report to markdown') {
                    steps {
                        script {
                            def reportPath = sh(script: "find ./target -type f -name 'org.openrewrite.java.dependencies.table.VulnerabilityReport.csv'", returnStdout: true).trim()
                            if (reportPath) {
                                echo 'Vulnerability report found'
                                HAS_VANUARABLE_DEPENDENCIES = true

                                // Read CSV file
                                def csvContent = readFile(reportPath)
                                def lines = csvContent.split('\n')
                                def headers = lines[0].split(',')
                                def markdown = ''

                                // Convert CSV to markdown
                                headers.each { header ->
                                    markdown += "| ${header} "
                                }
                                markdown += "|\n"
                                headers.each { header ->
                                    markdown += "| --- "
                                }
                                markdown += "|\n"

                                lines.tail().each { line ->
                                    def data = line.split(',')
                                    headers.eachWithIndex { header, idx ->
                                        markdown += "| ${data[idx].trim()} "
                                    }
                                    markdown += "|\n"
                                }

                                // Output markdown
                                echo markdown




                            } else {
                                echo 'No vulnerability report found'
                            }
                        }
                    }
                }


    }

    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}