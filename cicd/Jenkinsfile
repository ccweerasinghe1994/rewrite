def gv

pipeline {
    agent any

     environment {
            // Manually define BRANCH_NAME if not set by Jenkins environment
            BRANCH_NAME = "${env.BRANCH_NAME ?: 'main'}"
            SERVER_CREDENTIALS = credentials('server-credentials')
            HAS_VANUARABLE_DEPENDENCIES = false
     }
     parameters {
        string(name: 'VERSION', defaultValue: '1.0.0', description: 'Version to build')
        credentials(name: 'SERVER_CREDENTIALS', description: 'Credentials for server')
        choice(name: 'CHOICE', choices: ['one', 'two', 'three'], description: 'Choose one')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'whether to run tests')
     }

     tools {
        maven 'maven-3.9.8'
     }

    stages {
        stage('Init'){
            steps {
                echo "Init.."
                script {
                    gv = load('cicd/script.groovy')
                }
            }
        }

        stage('Build') {

            when {
                expression { BRANCH_NAME == 'main' }
            }
            steps {
                script {
                    gv.buildApp()
                }
            }
        }
        stage('dependency-check') {
            steps {
                script {
                    echo 'Checking for dependency updates'
                    sh 'mvn versions:display-dependency-updates'
                    echo 'Checking for plugin updates'
                    sh 'mvn versions:display-plugin-updates'
                }
            }
        }

        stage('generate vulnerabilities report') {

            steps {
                script {
                    echo 'Checking for vulnerabilities'
                    sh 'mvn rewrite:run'
                }
            }

        }

        stage('read the vulnerabilities report') {
//             if (fileExists('target/rewrite/datatables/*/org.openrewrite.java.dependencies.table.VulnerabilityReport.csv')) {
//                 echo 'Vulnerabilities found'
//                 HAS_VANUARABLE_DEPENDENCIES = true
//             } else {
//                 echo 'No vulnerabilities found'
//             }

            when{
                expression {
                    fileExists('target/rewrite/datatables/*/org.openrewrite.java.dependencies.table.VulnerabilityReport.csv')
                }
            }

            steps {
                script {
                    HAS_VANUARABLE_DEPENDENCIES = true
                    echo 'Reading the vulnerabilities report'
//                     how to read the csv file
                    echo readFile('target/rewrite/datatables/*/org.openrewrite.java.dependencies.table.VulnerabilityReport.csv')
                }
            }

        }

        stage('Test') {

            when {
                expression { params.RUN_TESTS == true }
            }
            steps {
                script {
                    gv.testApp()
                }
            }
        }


    }

    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }
}